{{- $fullName := include "asset-manager.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "asset-manager.labels" . | nindent 4 }}
    app: {{ $fullName }}
    app.kubernetes.io/name: {{ $fullName }}
    app.kubernetes.io/component: app
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ $fullName }}
  template:
    metadata:
      labels:
        {{- include "asset-manager.labels" . | nindent 8 }}
        app: {{ $fullName }}
        app.kubernetes.io/name: {{ $fullName }}
        app.kubernetes.io/component: app
    spec:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        fsGroup: &old-ec2-deploy-uid 2899
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      {{- with .Values.dnsConfig }}
      dnsConfig:
        {{- . | toYaml | trim | nindent 8 }}
      {{- end }}
      volumes:
        - name: {{ .Values.nginxConfigMap.name | default (printf "%s-nginx-conf" $fullName) }}
          configMap:
            name: {{ .Values.nginxConfigMap.name | default (printf "%s-nginx-conf" $fullName) }}
        - name: app-tmp
          emptyDir: {}
        - name: nginx-tmp
          emptyDir: {}
        - name: asset-manager-efs
          nfs:
            server: {{ .Values.assetManagerNFS }}
            path: /asset-manager
        {{- with .Values.extraVolumes }}
          {{ . | toYaml | trim | nindent 8 }}
        {{- end }}
      containers:
        - name: app
          image: "{{ required "appImage.repository is required" .Values.appImage.repository }}:{{ .Values.appImage.tag }}"
          imagePullPolicy: {{ .Values.appImage.pullPolicy | default "Always" }}
          ports:
            - name: http
              containerPort: {{ .Values.appPort }}
            - name: metrics
              containerPort: {{ .Values.metricsPort }}
          volumeMounts:
            - name: app-tmp
              mountPath: /tmp
            - name: asset-manager-efs
              mountPath: &uploads-path /mnt/asset-manager
            {{- with .Values.appExtraVolumeMounts }}
              {{ . | toYaml | trim | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: govuk-apps-env
          env:
            - name: GOVUK_UPLOADS_ROOT
              value: *uploads-path
            - name: PORT
              value: "{{ .Values.appPort }}"
            - name: SECRET_KEY_BASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.repoName }}-rails-secret-key-base
                  key: secret-key-base
            {{- if .Values.sentry.enabled }}
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.repoName }}-sentry
                  key: dsn
            - name: SENTRY_RELEASE
              value: "{{ .Values.appImage.tag }}"
            {{- end }}
            {{- with .Values.extraEnv }}
              {{- (tpl (toYaml .) $) | trim | nindent 12 }}
            {{- end }}
          {{- with .Values.appResources }}
          resources:
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
          {{- with .Values.appProbes }}
            {{- . | toYaml | trim | nindent 10 }}
          {{- else }}
          startupProbe: &app-probe  # TODO: check the Rails apps aren't picky about the Host header.
            httpGet:
              path: /healthcheck/live
              port: http
            failureThreshold: 10
            periodSeconds: 3
            timeoutSeconds: 5
          livenessProbe:
            <<: *app-probe
            failureThreshold: 3
            periodSeconds: 5
          readinessProbe:
            <<: *app-probe
            httpGet:
              path: /healthcheck/live  # TODO: fix readiness check so that we can use it here.
              port: http
            failureThreshold: 2
            periodSeconds: 5
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            # Asset Manager shares an NFS volume with its EC2 counterpart.
            runAsUser: *old-ec2-deploy-uid
            runAsGroup: *old-ec2-deploy-uid
        - name: nginx
          image: "{{ .Values.nginxImage.repository }}:{{ .Values.nginxImage.tag }}"
          ports:
            - name: http
              containerPort: {{ .Values.nginxPort }}
          livenessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 2
            failureThreshold: 3
            periodSeconds: 5
            timeoutSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 2
            failureThreshold: 2
            periodSeconds: 5
            timeoutSeconds: 15
          volumeMounts:
            - name: {{ .Values.nginxConfigMap.name | default (printf "%s-nginx-conf" $fullName) }}
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: nginx-tmp
              mountPath: /tmp
            {{- with .Values.nginxExtraVolumeMounts }}
              {{ . | toYaml | trim | nindent 12 }}
            {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
