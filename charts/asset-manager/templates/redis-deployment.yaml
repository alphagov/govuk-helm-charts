{{ if .Values.redis.enabled }}
{{- $fullName := include "asset-manager.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}-redis
  labels:
    {{- include "asset-manager.labels" . | nindent 4 }}
    app: {{ $fullName }}-redis
    app.kubernetes.io/name: {{ $fullName }}-redis
    app.kubernetes.io/component: redis
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: {{ $fullName }}-redis
      app.kubernetes.io/component: redis
  template:
    metadata:
      labels:
        {{- include "asset-manager.labels" . | nindent 8 }}
        app: {{ $fullName }}-redis
        app.kubernetes.io/name: {{ $fullName }}-redis
        app.kubernetes.io/component: redis
    spec:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        fsGroup: 1001
        runAsUser: 1001
        runAsGroup: 1001
        runAsNonRoot: true
      {{- with .Values.dnsConfig }}
      dnsConfig:
        {{- . | toYaml | trim | nindent 8 }}
      {{- end }}
      volumes:
        - name: config
          configMap:
            name: {{ $fullName }}-redis-conf
        - name: storage
          persistentVolumeClaim:
            claimName: {{ $fullName }}-redis
      containers:
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          imagePullPolicy: {{ .Values.redis.image.pullPolicy }}
          command: ["redis-server", "/etc/redis/redis.conf"]
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe: &redisProbe
            tcpSocket: &redisSocket
              port: 6379
            failureThreshold: 3
            periodSeconds: 5
            timeoutSeconds: 20
          readinessProbe:
            <<: *redisProbe
          startupProbe:
            tcpSocket: *redisSocket
            failureThreshold: 5
            periodSeconds: 5
            timeoutSeconds: 20
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: config
              mountPath: /etc/redis/redis.conf
              subPath: redis.conf
            - name: storage
              mountPath: /data
          resources:
            {{- .Values.redis.resources | toYaml | trim | nindent 12 }}
      {{- if eq "arm64" .Values.arch }}
      tolerations:
        - key: arch
          operator: Equal
          value: {{ .Values.arch }}
          effect: NoSchedule
      nodeSelector:
        kubernetes.io/arch: {{ .Values.arch }}
      {{- end }}
{{ end }}
