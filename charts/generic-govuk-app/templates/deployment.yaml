{{- if .Values.appEnabled -}}
{{- $fullName := include "generic-govuk-app.fullname" . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fullName }}
  labels:
    {{- include "generic-govuk-app.labels" . | nindent 4 }}
    app: {{ $fullName }}
    app.kubernetes.io/name: {{ $fullName }}
    app.kubernetes.io/component: app
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: {{ $fullName }}
  template:
    metadata:
      labels:
        {{- include "generic-govuk-app.labels" . | nindent 8 }}
        app: {{ $fullName }}
        app.kubernetes.io/name: {{ $fullName }}
        app.kubernetes.io/component: app
    spec:
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        fsGroup: {{ .Values.securityContext.runAsGroup }}
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
      {{- with .Values.dnsConfig }}
      dnsConfig:
        {{- . | toYaml | trim | nindent 8 }}
      {{- end }}
      volumes:
        - name: {{ .Values.nginxConfigMap.name | default (printf "%s-nginx-conf" $fullName) }}
          configMap:
            name: {{ .Values.nginxConfigMap.name | default (printf "%s-nginx-conf" $fullName) }}
        - name: app-tmp
          emptyDir: {}
        - name: nginx-tmp
          emptyDir: {}
        {{- if .Values.serveRailsAssetsFromFilesystem }}
        - name: assets
          emptyDir: {}
        {{- end }}
        {{- with .Values.extraVolumes }}
          {{- . | toYaml | trim | nindent 8 }}
        {{- end }}
      {{- if .Values.serveRailsAssetsFromFilesystem }}
      initContainers:
        - name: copy-assets
          image: "{{ .Values.appImage.repository }}:{{ .Values.appImage.tag }}"
          imagePullPolicy: {{ .Values.appImage.pullPolicy | default "Always" }}
          {{- $sourcePath := .Values.uploadAssets.path | default (printf "/app/public/assets/%s" .Values.repoName) }}
          command: ["cp", "-R", "{{ $sourcePath }}", "/assets"]
          volumeMounts:
            - name: assets
              mountPath: /assets
      {{- end }}
      containers:
        - name: app
          image: "{{ .Values.appImage.repository }}:{{ .Values.appImage.tag }}"
          imagePullPolicy: {{ .Values.appImage.pullPolicy | default "Always" }}
          ports:
            - name: http
              containerPort: {{ .Values.appPort }}
            - name: metrics
              containerPort: {{ .Values.metricsPort }}
          envFrom:
            - configMapRef:
                name: govuk-apps-env
          env:
            - name: PORT
              value: "{{ .Values.appPort }}"
            {{- if .Values.sentry.enabled }}
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.repoName }}-sentry
                  key: dsn
            - name: SENTRY_RELEASE
              value: "{{ .Values.appImage.tag }}"
            {{- end }}
            {{- with .Values.extraEnv }}
              {{- (tpl (toYaml .) $) | trim | nindent 12 }}
            {{- end }}
          {{- with .Values.appResources }}
          resources:
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
          {{- with .Values.appProbes }}
            {{- . | toYaml | trim | nindent 10 }}
          {{- else }}
          startupProbe: &app-probe  # TODO: check the Rails apps aren't picky about the Host header.
            httpGet:
              path: /healthcheck/live
              port: http
            failureThreshold: 10
            periodSeconds: 3
            timeoutSeconds: 15
          livenessProbe:
            <<: *app-probe
            failureThreshold: 3
            periodSeconds: 5
          readinessProbe:
            <<: *app-probe
            httpGet:
              path: /healthcheck/live  # TODO: fix readiness check so that we can use it here.
              port: http
            failureThreshold: 2
            periodSeconds: 5
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: app-tmp
              mountPath: /tmp
            {{- with .Values.appExtraVolumeMounts }}
              {{- . | toYaml | trim | nindent 12 }}
            {{- end }}
        - name: nginx
          image: "{{ .Values.nginxImage.repository }}:{{ .Values.nginxImage.tag }}"
          imagePullPolicy: {{ .Values.nginxImage.pullPolicy | default "Always" }}
          ports:
            - name: http
              containerPort: {{ .Values.nginxPort }}
          livenessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 2
            failureThreshold: 3
            periodSeconds: 5
            timeoutSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
            initialDelaySeconds: 2
            failureThreshold: 2
            periodSeconds: 5
            timeoutSeconds: 15
          {{- with .Values.nginxResources }}
          resources:
            {{- . | toYaml | trim | nindent 12 }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
          volumeMounts:
            - name: {{ .Values.nginxConfigMap.name | default (printf "%s-nginx-conf" $fullName) }}
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: nginx-tmp
              mountPath: /tmp
            {{- if .Values.serveRailsAssetsFromFilesystem }}
            - name: assets
              mountPath: /assets
            {{- end }}
            {{- with .Values.nginxExtraVolumeMounts }}
              {{ . | toYaml | trim | nindent 12 }}
            {{- end }}
{{- end }}
