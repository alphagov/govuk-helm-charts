---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: "{{ include "mirror.fullname" . }}"
  labels:
    {{- include "mirror.labels" . | nindent 4 }}
spec:
  schedule: "{{ .Values.schedule }}"
  jobTemplate:
    metadata:
      name: "{{ include "mirror.fullname" . }}"
      labels:
        {{- include "mirror.labels" . | nindent 8 }}
    spec:
      backoffLimit: 0
      template:
        metadata:
          name: "{{ include "mirror.fullname" . }}"
          labels:
            {{- include "mirror.labels" . | nindent 12 }}
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        spec:
          enableServiceLinks: false
          serviceAccountName: {{ include "mirror.serviceAccountName" . }}
          securityContext:
            {{- toYaml $.Values.podSecurityContext | nindent 12 }}
          restartPolicy: Never
          volumes:
            - name: app-mirror-sync
              persistentVolumeClaim:
                claimName: {{ include "mirror.fullname" . }}
            - name: app-tmp
              emptyDir: {}
          initContainers:
            - name: scrape
              image: "{{ .Values.images.GovukMirror.repository }}:{{ .Values.images.GovukMirror.tag }}"
              imagePullPolicy: "Always"
              workingDir: /data
              resources:
                limits:
                  cpu: 4
                  memory: 20000Mi
                requests:
                  cpu: 2
                  memory: 15000Mi
              securityContext:
                {{- toYaml $.Values.securityContext | nindent 16 }}
              volumeMounts:
                - name: app-mirror-sync
                  mountPath: /data
                - name: app-tmp
                  mountPath: /tmp
              env:
                - name: SITE
                  value: https://www-origin.{{ .Values.publishingDomainSuffix }}/sitemap.xml
                - name: ALLOWED_DOMAINS
                  value: www-origin.{{ .Values.publishingDomainSuffix }},{{ .Values.assetsDomain }}
                - name: DISALLOWED_URL_RULES
                  value: '/apply-for-a-licence(/|$),/business-finance-support(/|$),/drug-device-alerts\.atom,/drug-safety-update\.atom,/foreign-travel-advice\.atom,/government/announcements\.atom,/government/publications\.atom,/government/statistics\.atom,/licence-finder/,/search(/|$),\.csv/preview$'
                - name: CONCURRENCY
                  value: "5"
                - name: RATE_LIMIT_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "mirror.fullname" . }}
                      key: rate-limit-token
                - name: HEADERS
                  value: 'rate-limit-token:$(RATE_LIMIT_TOKEN)'
          containers:
            - name: upload-to-s3
              image: peakcom/s5cmd:v2.3.0
              imagePullPolicy: "Always"
              resources:
                limits:
                  cpu: 4
                  memory: 8000Mi
                requests:
                  cpu: 2
                  memory: 5000Mi
              securityContext:
                {{- toYaml $.Values.securityContext | nindent 16 }}
              volumeMounts:
                - name: app-mirror-sync
                  mountPath: /data
                - name: app-tmp
                  mountPath: /tmp
              env:
                - name: AWS_REGION
                  value: eu-west-2
                - name: BUCKET_NAME
                  value: govuk-{{ .Values.govukEnvironment }}-mirror
                - name: WWW_DOMAIN
                  value: www.{{ .Values.externalDomainSuffix }}
                - name: ASSETS_DOMAIN
                  value: {{ .Values.assetsDomain }}
              command:
                - /bin/sh
                - -c
                - |-
                  set -eu
                  # Sync mirrors
                  /s5cmd sync --size-only "/data/${WWW_DOMAIN}" "s3://${BUCKET_NAME}/"
                  /s5cmd sync --size-only "/data/${ASSETS_DOMAIN}" "s3://${BUCKET_NAME}/"

                  # Upload file for checking mirror freshness
                  date -Iseconds > "/data/${WWW_DOMAIN}/last-updated.txt"
                  /s5cmd cp "/data/${WWW_DOMAIN}/last-updated.txt" "s3://${BUCKET_NAME}/${WWW_DOMAIN}/last-updated.txt"
