
{{- if eq .Values.govukEnvironment "integration" }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: "draft-content-store-mongo-to-postgres-cron"
  labels:
    app: "draft-content-store-mongo-to-postgres-cron"
    app.kubernetes.io/component: "draft-content-store-mongo-to-postgres-cron"
spec:
  schedule: "{{ .Values.draftContentStoreMongoPostgresCron.schedule }}"  
  jobTemplate:
    metadata:
      name: "draft-content-store-mongo-to-postgres-cron"
      labels:
        app: "draft-content-store-mongo-to-postgres-cron"
        app.kubernetes.io/component: "draft-content-store-mongo-to-postgres-cron"
    spec:
      backoffLimit: 0
      template:
        metadata:
          name: "draft-content-store-mongo-to-postgres-cron"
          labels:
            app: "draft-content-store-mongo-to-postgres-cron"
            app.kubernetes.io/component: "draft-content-store-mongo-to-postgres-cron"
        spec:
          enableServiceLinks: false
          securityContext:
            fsGroup: {{ .Values.securityContext.runAsGroup }}
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
          restartPolicy: Never
          volumes:
            - name: mongo-export
              emptyDir: {}
            - name: app-tmp
              emptyDir: {}
          initContainers:
            - name: export-mongo-data
              image: "{{ .Values.images.ContentStore.repository }}:{{ .Values.images.ContentStore.tag }}"
              imagePullPolicy: "Always"
              command: ["rake"]
              args:
                - "mongo:export:all[/mongo-export/]"
              env:
                - name: MONGODB_URI
                  value: "{{ .Values.draftContentStoreMongoPostgresCron.mongoExport.mongoDbUri }}"
              {{- with .Values.resources }}
              resources:
                {{- . | toYaml | trim | nindent 16 }}
              {{- end }}
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
              volumeMounts:
                - name: mongo-export
                  mountPath: /mongo-export
                - name: app-tmp
                  mountPath: /tmp
          containers:
            - name: import-mongo-data-to-postgresql
              image: "{{ .Values.images.ContentStorePostgresqlBranch.repository }}:{{ .Values.images.ContentStorePostgresqlBranch.tag }}"
              imagePullPolicy: "Always"
              command: ["rake"]
              args:
                - "import:all[/mongo-export/]"
              env:
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.draftContentStoreMongoPostgresCron.postgresImport.databaseUrlSecretName }}"
                      key: DATABASE_URL
              {{- with .Values.resources }}
              resources:
                {{- . | toYaml | trim | nindent 16 }}
              {{- end }}
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
              volumeMounts:
                - name: mongo-export
                  mountPath: /mongo-export
                - name: app-tmp
                  mountPath: /tmp

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: "content-store-mongo-to-postgres-cron"
  labels:
    app: "content-store-mongo-to-postgres-cron"
    app.kubernetes.io/component: "content-store-mongo-to-postgres-cron"
spec:
  schedule: "{{ .Values.draftContentStoreMongoPostgresCron.schedule }}"  
  jobTemplate:
    metadata:
      name: "content-store-mongo-to-postgres-cron"
      labels:
        app: "content-store-mongo-to-postgres-cron"
        app.kubernetes.io/component: "content-store-mongo-to-postgres-cron"
    spec:
      backoffLimit: 0
      template:
        metadata:
          name: "content-store-mongo-to-postgres-cron"
          labels:
            app: "content-store-mongo-to-postgres-cron"
            app.kubernetes.io/component: "content-store-mongo-to-postgres-cron"
        spec:
          enableServiceLinks: false
          securityContext:
            fsGroup: {{ .Values.securityContext.runAsGroup }}
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
            runAsUser: {{ .Values.securityContext.runAsUser }}
            runAsGroup: {{ .Values.securityContext.runAsGroup }}
          restartPolicy: Never
          volumes:
            - name: mongo-export
              emptyDir: {}
            - name: app-tmp
              emptyDir: {}
            - name: pg-dump
              emptyDir: {}
          initContainers:
            - name: export-mongo-data
              image: "{{ .Values.images.ContentStore.repository }}:{{ .Values.images.ContentStore.tag }}"
              imagePullPolicy: "Always"
              command: ["rake"]
              args:
                - "mongo:export:all[/mongo-export/]"
              env:
                - name: MONGODB_URI
                  value: "{{ .Values.contentStoreMongoPostgresCron.mongoExport.mongoDbUri }}"
              {{- with .Values.resources }}
              resources:
                {{- . | toYaml | trim | nindent 16 }}
              {{- end }}
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
              volumeMounts:
                - name: mongo-export
                  mountPath: /mongo-export
                - name: app-tmp
                  mountPath: /tmp
            - name: import-mongo-data-to-postgresql
              image: "{{ .Values.images.ContentStorePostgresqlBranch.repository }}:{{ .Values.images.ContentStorePostgresqlBranch.tag }}"
              imagePullPolicy: "Always"
              command: ["rake"]
              args:
                - "import:all[/mongo-export/]"
              env:
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.contentStoreMongoPostgresCron.postgresImport.databaseUrlSecretName }}"
                      key: DATABASE_URL
              {{- with .Values.resources }}
              resources:
                {{- . | toYaml | trim | nindent 16 }}
              {{- end }}
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
              volumeMounts:
                - name: mongo-export
                  mountPath: /mongo-export
                - name: app-tmp
                  mountPath: /tmp
                - name: pg-dump
                  mountPath: /pg-dump
            - name: dump-postgresql
              image: 172025368201.dkr.ecr.eu-west-1.amazonaws.com/github-cli:latest
              command: ["pg_dump"]
              args:
                - --format=custom
                - --file=/pg-dump/$(date +%Y-%m-%dT%H:%M:%S)-content_store_production
                - '${DATABASE_URL}'
              env:
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: "{{ .Values.contentStoreMongoPostgresCron.postgresImport.databaseUrlSecretName }}"
                      key: DATABASE_URL
              {{- with .Values.resources }}
              resources:
                {{- . | toYaml | trim | nindent 16 }}
              {{- end }}
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
              volumeMounts:
                - name: app-tmp
                  mountPath: /tmp
                - name: pg-dump
                  mountPath: /pg-dump
          containers:
            - name: upload-to-s3
              image: 172025368201.dkr.ecr.eu-west-1.amazonaws.com/github-cli:latest
              command:
                - aws
                - s3
                - sync
                - /pg-dump
                - s3://govuk-integration-database-backups/draft-content-store/
              {{- with .Values.jobResources }}
              resources:
                {{- . | toYaml | trim | nindent 12 }}
              {{- end }}
              volumeMounts:
                - name: pg-dump
                  mountPath: /pg-dump
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
{{- end }}
