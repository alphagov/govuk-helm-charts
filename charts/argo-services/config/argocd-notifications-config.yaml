# This file is pulled into templates/argocd-notifications/cm.yaml to avoid
# nesting template languages. Helm uses Go and Argo uses Jinja2. Both use the
# `{{}}` syntax.
service.webhook.argo_events: |
  headers:
  - name: "Content-Type"
    value: "application/json"
  - name: Authorization
    value: Bearer $argo_events_webhook_token
  url: "http://argo-workflows-server.cluster-services.svc.cluster.local:2746"
service.slack: |
  token: $slack_url
  channel: "#govuk-platform-engineering-low-priority-alarms"
service.grafana: |
  apiUrl: http://kube-prometheus-stack-grafana.monitoring.svc.cluster.local/api
  apiKey: $grafana_api_key
template.send-argo-events-webhook: |
  webhook:
    argo_events:
      body: |
        {
          "application": "{{.app.metadata.name}}",
          "state": "{{.app.status.operationState.phase}}",
          "repoName": "{{.app.metadata.annotations.repoName}}",
          "imageTag": "{{.app.metadata.annotations.imageTag}}",
          "promoteDeployment": "{{.app.metadata.annotations.promoteDeployment}}",
          "automaticDeploysEnabled": "{{.app.metadata.annotations.automaticDeploysEnabled}}"
        }
      method: "POST"
      path: "/api/v1/events/apps/post-sync"
# yamllint disable rule:line-length
template.send-grafana: |
  message: |
    "Application {{.app.metadata.name}} is now running new version of deployments manifests. Revision: {{.app.status.sync.revision}}"
template.send-slack-failure: |
  slack:
    attachments: |
      [{
        "title": "Application {{.app.metadata.name}} deployment failed",
        "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
        "color": "danger",
        "fields": [
          {
            "title": "Sync Status",
            "value": "{{.app.status.sync.status}}",
            "short": true
          },
          {
            "title": "Health Status",
            "value": "{{.app.status.health.status}}",
            "short": true
          },
          {
            "title": "Repository",
            "value": "{{.app.spec.source.repoURL}}",
            "short": true
          },
          {
            "title": "Revision",
            "value": "{{.app.status.sync.revision}}",
            "short": true
          }
        ]
      }]
trigger.deployment: |
  - oncePer: "app.status.operationState.syncResult.revision"
    send: ["send-grafana"]
    when: "app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'"
trigger.on-deployed: |
  - send: ["send-argo-events-webhook"]
    oncePer: 'app.status.operationState.syncResult.revision'
    when: "app.status.operationState.phase in ['Succeeded'] and app.status.health.status
      == 'Healthy' and app.metadata.annotations['postSyncWorkflowEnabled'] == 'true' "
trigger.on-sync-failed: |
  - send: ["send-slack-failure"]
    when: "app.status.operationState.phase in ['Error', 'Failed']"
trigger.on-health-degraded: |
  - send: ["send-slack-failure"]
    when: "app.status.health.status == 'Degraded'"
