apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: post-sync
spec:
  workflowMetadata:
    labels:
      repoName: "{{ `{{workflow.parameters.repoName}}` }}"
      application: "{{ `{{workflow.parameters.application}}` }}"
      imageTag: "{{ `{{workflow.parameters.imageTag}}` }}"
      promoteDeployment: "{{ `{{workflow.parameters.promoteDeployment}}` }}"
      automaticDeploysEnabled: "{{ `{{workflow.parameters.automaticDeploysEnabled}}` }}"
  entrypoint: handle-sync-event
  onExit: exit-handler
  retryStrategy:
    expression: "asInt(lastRetry.exitCode) > 1"
    limit: 3
    backoff:
      duration: "2m"
      factor: 2
      maxDuration: "16m"
  arguments:
    parameters:
      - name: application
      - name: repoName
      - name: imageTag
      - name: promoteDeployment
      - name: automaticDeploysEnabled
  podSpecPatch: |
    containers:
      - name: main
        resources:
          limits:
            memory: 2Gi
  templates:
    - name: handle-sync-event
      podSpecPatch: '{"containers":[{"name":"main","resources":{"limits":{"cpu":2,"memory":"2Gi"},"requests":{"cpu":1,"memory":"1Gi"}}}]}'
      dag:
        tasks:
          - name: govuk-e2e-tests
            templateRef:
              name: govuk-e2e-tests
              template: govuk-e2e-tests
            arguments:
              parameters:
                - name: grep
                  value: "{{"@app-{{workflow.parameters.application}}"}}"
    {{ if .Values.nextEnvironment }}
          - name: promote-release
            depends: govuk-e2e-tests.Succeeded
            when: "{{"'{{workflow.parameters.application}}' !~ '^draft-' && '{{workflow.parameters.promoteDeployment}}' == 'true' && '{{workflow.parameters.automaticDeploysEnabled}}' == 'true'"}}"
            template: send-webhook
            arguments:
              parameters:
                - name: environment
                  value: "{{ .Values.nextEnvironment }}"
                - name: repoName
                  value: "{{"{{workflow.parameters.repoName}}"}}"
                - name: imageTag
                  value: "{{"{{workflow.parameters.imageTag}}"}}"
                - name: promoteDeployment
                  value: "true"
    - name: send-webhook
      inputs:
        parameters:
        - name: environment
        - name: repoName
        - name: imageTag
        - name: promoteDeployment
      script:
        image: quay.io/curl/curl
        command:
          - sh
        source: >
          curl -s "${WEBHOOK_URL}/update-image-tag" \
            -H "Authorization: Bearer ${WEBHOOK_TOKEN}" \
            --json '{
              "environment": "{{"{{inputs.parameters.environment}}"}}",
              "repoName": "{{"{{inputs.parameters.repoName}}"}}",
              "imageTag": "{{"{{inputs.parameters.imageTag}}"}}",
              "promoteDeployment": "{{"{{inputs.parameters.promoteDeployment}}"}}"
            }'
        env:
          - name: WEBHOOK_TOKEN
            valueFrom:
              secretKeyRef:
                name: deploy-image-webhook-endpoint
                key: token
          - name: WEBHOOK_URL
            valueFrom:
              secretKeyRef:
                name: deploy-image-webhook-endpoint
                key: url
    {{- end }}

    - name: parse-failures
      inputs: {}
      outputs:
        parameters:
          - name: message
            valueFrom:
              path: /tmp/message.txt
      script:
        image: 172025368201.dkr.ecr.eu-west-1.amazonaws.com/github/alphagov/govuk/toolbox:latest
        command:
          - /bin/bash
        volumeMounts:
          - name: tmp
            mountPath: /tmp
        resources: {}
        source: >
          #!/usr/bin/env bash

          echo {{"{{workflow.failures}}"}} | jq -r 'group_by(.templateName) | map({templateName: .[0].templateName, errorMessages: [.[].message | select(length > 0)] | unique}) | map("🔴 *" + .templateName + "* failed\n   └ " + ([.errorMessages[] | (if test("timeout|timed out"; "i") then "⏰ " + . elif test("connection refused|network|dns"; "i") then "🌐 " + . elif test("permission denied|forbidden|unauthorized"; "i") then "🔐 " + . elif test("not found|404"; "i") then "❓ " + . elif test("database|sql|migration"; "i") then "🗄️ " + . elif test("exit code [1-9]"; "i") then "❌ " + . else . end)] | join("\n   └ "))) | join("\n\n")' > /tmp/message.txt
      volumes:
        - name: tmp
          emptyDir: {}
    - name: exit-handler
      steps:
        - - name: parse-failures
            template: parse-failures
            when: "{{"{{workflow.status}}"}} != Succeeded"
        - - name: notify-slack
            when: "{{"{{workflow.status}}"}} != Succeeded"
            templateRef:
              name: notify-slack
              template: notify-slack
            arguments:
              parameters:
                - name: slackChannel
                  # NOTE: Change to {{"{{workflow.parameters.slackChannel}}"}} to
                  # send to team slack channel.
                  value: "govuk-deploy-alerts"
                - name: text
                  value: "🔴 {{"{{workflow.parameters.application}}"}} post-deploy workflow failed in {{ .Values.govukEnvironment }}\n\nService Status: {{"{{workflow.parameters.application}}"}} deployment succeeded but post-deploy checks failed\nImage: {{"{{workflow.parameters.imageTag}}"}}\nRepo: {{"{{workflow.parameters.repoName}}"}}\n\n{{"{{ steps.parse-failures.outputs.parameters.message }}"}}\n\n💡 *Next Steps:*\n• View workflow details and logs in the Argo Workflows UI\n• Check failed step logs for specific error details\n• Service should still be operational on previous version\n• Investigate why post-deploy checks are failing"
                - name: blocks
                  value: |
                    [{
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "🔴 *{{"{{workflow.parameters.application}}"}}* post-deploy workflow failed in *{{ .Values.govukEnvironment }}*\n\n*Service Status:* {{"{{workflow.parameters.application}}"}} deployment succeeded but post-deploy checks failed\n*Image:* {{"{{workflow.parameters.imageTag}}"}}\n*Repo:* {{"{{workflow.parameters.repoName}}"}}\n\n{{"{{ steps.parse-failures.outputs.parameters.message }}"}}\n\n💡 *Next Steps:*\n• View workflow details and logs in the Argo Workflows UI\n• Check failed step logs for specific error details\n• Service should still be operational on previous version\n• Investigate why post-deploy checks are failing"
                      },
                      "accessory": {
                        "type": "button",
                        "text": {
                            "type": "plain_text",
                            "text": "View workflow",
                            "emoji": true
                        },
                        "url": "https://argo-workflows.eks.{{ .Values.govukEnvironment }}.govuk.digital/workflows/apps/{{"{{ workflow.name }}"}}",
                        "action_id": "view-workflow"
                      }
                    }]
