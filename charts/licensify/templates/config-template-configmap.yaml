apiVersion: v1
kind: ConfigMap
metadata:
  name: licensify-config-template
data:
  config.properties: |
    {{ if .Values.config.clamAntivirusHost }}
    clam.antivirus.host={{ .Values.config.clamAntivirusHost }}
    {{ end }}
    scheduled.virus.scan.cron.expression={{ .Values.config.scheduledVirusScanCronExpression }}

    # AWS Config
    amazon.key.access={{ `{{ .aws_access_key_id }}` }}
    amazon.key.secret={{ `{{ .aws_access_secret_key }}` }}

    # MongoDB Config
    mongo.database.hosts={{ join "," .Values.config.mongo.dbHosts }}
    mongo.database.reference.name={{ .Values.config.mongo.dbReferenceName }}
    mongo.database.audit.name={{ .Values.config.mongo.dbAuditName }}
    mongo.database.auth.enabled={{ .Values.config.mongo.dbAuthEnabled }}
    mongo.database.auth.username={{ .Values.config.mongo.dbAuthUsername }}
    mongo.database.auth.password={{ `{{ .mongo_database_auth_password }}` }}
    mongo.database.slaveok={{ .Values.config.mongo.dbSlaveOk }}

    # Elms config
    places.api.url={{ .Values.config.placesApiUrl }}
    feedActor={{ .Values.config.feedActor }}
    uploadUrlBase={{ .Values.config.frontendBaseUrl }}/
    elms.frontend.host={{ .Values.config.frontendBaseUrl }}/
    elms.admin.host={{ .Values.config.baseUrl }}/
    elms.pdf.apihost={{ .Values.config.elmsPdfApiHost }}
    elms.max.appProcessAttemptCount="{{ .Values.config.elmsMaxAppProcessAttemptCount }}"
    govuk.url={{ .Values.config.frontendBaseUrl }}

    # Authorization config
    signon.url={{ .Values.config.signonBaseUrl }}
    access_token_url={{ .Values.config.signonBaseUrl }}/oauth/access_token
    authorization_url={{ .Values.config.signonBaseUrl }}/oauth/authorize
    user_details_url={{ .Values.config.signonBaseUrl }}/user.json
    oauth_callback_url_override={{ .Values.config.baseUrl }}/licence-management/admin/oauth

    # Google Analytics config
    client_id={{ `{{ .client_id }}` }}
    client_secret={{ `{{ .client_secret }}` }}
    googleAnalytics.account.admin={{ .Values.config.googleAnalytics.accountAdmin }}
    googleAnalytics.domain.admin={{ .Values.config.googleAnalytics.domainAdmin }}
    googleAnalytics.account.frontend={{ .Values.config.googleAnalytics.accountFrontend }}
    googleAnalytics.domain.frontend={{ .Values.config.googleAnalytics.domainFrontend }}

    # Payment provider config
    worldpay.redirectUrl={{ .Values.config.frontendBaseUrl }}/apply-for-a-licence/payment/worldpayComplete
    worldpay.cancelled.redirectUrl={{ .Values.config.frontendBaseUrl }}/apply-for-a-licence/payment/worldpayCancelled
    paymentsTestMode={{ .Values.config.paymentsTestMode }}
    noReplyMailAddress={{ .Values.config.noReplyMailAddress }}

    # License Finder config
    licenceFinderUrl={{ .Values.config.licenceFinderUrl }}

    # Performance platform config
    performance.platform.service.url={{ .Values.config.performancePlatformUrl }}
    performance.platform.bearer.token={{ `{{ .performance_platform_bearer_token }}` }}
    performance.data.sender.cron.expression={{ .Values.config.performanceDataSenderCronExpression }}

    # Notify config
    notify.key.api={{ `{{ .notify_key_api }}` }}
    {{ if .Values.config.notifyKeyService }}
    notify.key.service={{ .Values.config.notifyKeyService }}
    {{ end }}
    {{ if .Values.config.notifyTemplateAuthority }}
    notify.template.authority={{ .Values.config.notifyTemplateAuthority }}
    {{ end }}

    # Other config
    app.timezone.id={{ .Values.config.appTimezoneId }}
    is.master.node={{ .Values.config.isMasterNode }}

    # Development config
    {{ if .Values.config.isTest }}
    is.test={{ .Values.config.isTest }}
    {{ end }}
    {{ if .Values.config.licenceApplicationPurgeExpiredAfter }}
    licenceApplication.purgeExpiredAfter={{ .Values.config.licenceApplicationPurgeExpiredAfter }}
    {{ end }}
    {{ if .Values.config.pdfCacheSeconds }}
    pdfCacheSeconds= {{ .Values.config.pdfCacheSeconds }}
    {{ end }}
    {{ if .Values.config.uncollectedExpiryEnabled }}
    uncollected.expiry.enabled= {{ .Values.config.uncollectedExpiryEnabled }}
    {{ end }}
