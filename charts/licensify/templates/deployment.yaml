apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "fullname" . }}
  labels:
    {{- include "labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      {{- include "selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- if .Values.podAnnotations -}}
        {{- toYaml .Values.podAnnotations | indent 8 }}
        {{- end }}
      labels:
        {{- include "selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        fsGroup: {{ .Values.securityContext.runAsGroup }}
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
      containers:
        - name: main
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.appImage.repository }}:{{ .Values.appImage.tag }}"
          imagePullPolicy: {{ .Values.appImage.pullPolicy | default "Always" }}
          env:
          {{- range $k, $v := .Values.env }}
            - name: {{ $v.name }}
              value: {{ $v.value }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: {{ .Values.service.targetPort }}
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 2
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              port: {{ .Values.service.targetPort }}
              path: {{ .Values.service.readinessPath | default "/" }}
            initialDelaySeconds: 10
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
          - name: gds-licensing-config
            mountPath: "/etc/licensing"
            readOnly: true
      volumes:
      - name: gds-licensing-config
        {{- if .Values.externalSecret.enabled }}
        secret:
          secretName: gds-licensing-config.properties
        {{- else }}
        configMap:
          name: gds-licensing-config
          items:
          - key: "gds-licensing-config.properties"
            path: "gds-licensing-config.properties"
        {{- end }}
