{{ $app := .Values.clamav }}
{{ $_ := set .Values "appName" $app.name }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $app.name }}
  labels:
    {{- include "licensify.labels" . | nindent 4 }}
spec:
  replicas: {{ $app.replicaCount }}
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      {{- include "licensify.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "licensify.labels" . | nindent 8 }}
    spec:
      securityContext:
        fsGroup: {{ .Values.securityContext.runAsGroup }}
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: main
          command:
            - "/unpriv-init"
          securityContext:
           {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ $app.image.repository }}:{{ $app.image.tag }}"
          imagePullPolicy: {{ $app.image.pullPolicy }}
          env:
            - name: CLAMAV_NO_FRESHCLAMD
              value: "true"
          ports:
            - name: clamav
              containerPort: {{ $app.service.port }}
          livenessProbe: &app-probe
            tcpSocket:
              port: clamav
            failureThreshold: 3
            periodSeconds: 5
            timeoutSeconds: 30
          readinessProbe:
            <<: *app-probe  # Intentionally same path as liveness.
            failureThreshold: 2
          startupProbe:
            <<: *app-probe
            failureThreshold: 15
            periodSeconds: 5
            timeoutSeconds: 2
            initialDelaySeconds: 10
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: app-tmp
              mountPath: /tmp
            - name: app-clamav-db
              mountPath: /var/lib/clamav
      volumes:
        - name: app-tmp
          emptyDir: {}
        - name: app-clamav-db
          nfs:
            server: "{{ .Values.assetManagerNFS }}"
            path: /clamav-db
            readOnly: true
      {{- if eq "arm64" .Values.arch }}
      tolerations:
        - key: arch
          operator: Equal
          value: {{ .Values.arch }}
          effect: NoSchedule
      nodeSelector:
        kubernetes.io/arch: {{ .Values.arch }}
      {{- end }}